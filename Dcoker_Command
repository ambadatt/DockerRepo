for pkg in docker.io docker-doc docker-compose podman-docker containerd runc; do sudo apt-get remove $pkg; done
sudo apt-get update
sudo apt-get install ca-certificates curl gnupg
sudo install -m 0755 -d /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
sudo chmod a+r /etc/apt/keyrings/docker.gpg
echo   "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
"$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" |   sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
 sudo apt-get update
sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
docker -version
docker --version  # This Command use for verifying the Docker version.
sudo docker run hello-world
sudo service docker start
sudo docker run hello-world
curl -fsSL https://get.docker.com -o get-docker.sh
sudo sh ./get-docker.sh --dry-run
docker image
docker images
docker  inspect images   # This Command use for detail oberview about images(If we are using inspect option).
docker  inspect --image 9c7a54a9a43c
docker  inspect 9c7a54a9a43c
docker ps
docker ps -a
docker ls -a
docker container ls
docker container ls -a
docker pull nginx
docker images
docker container ls
docker container inspect ce2ed505a88d
docker container run - -publish 80:80 nginx
docker container run - -publish 80:80 ngin
docker container run -d --p 80:80 nginx
docker container run -d -p 80:80 nginx
docker container run - -publish 80:80
docker container run --publish 80:80 --detach ngin
docker container run --publish 80:80 --detach apach
docker container rm 9507b8c6705e
docker stop 9507b8c6705e
docker stop ce2ed505a88d
docker rm 9507b8c6705e ce2ed505a88d

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
docker container rm $(docker container ls -aq) # This command used for all container need to remove from the host machine.
docker container  stop $(docker container ls -aq) # This command used for all container need to  stop from the host machine.
docker container  start $(docker container ls -aq) # This command used for all container need to start  from  the host machine.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

docker stop b40cb43645aa
docker container run --publish 80:80 --detach tomcat
docker stop 3b28a63708df2167befa104f7dd78106781722ae3b67da6b4bff598d3b430a0e
docker container run --publish 80:80 --detach httpd
docker ps 
docker container logs
docker container ls                  # We are using this command for list running container detail.
docker container logs f58854033421  # This Command use for checking the container logs.
docker container top f58854033421  #This command use for container internal proccess checking like Linux proccess.
docker container run --p 80:80 --d --name webproxy nginx
docker  run --p 80:80 --d --name webproxy nginx
docker  run --publish 80:80 --detach --name webproxy nginx
docker run --publish 3306:3306 --detach --name mysql --env MYSQL_RANDOM_ROOT_PASSWORD=yes mysql  # This Command use for Mysql container 
docker container stats 6995955d1669         # This command using for container internal proccess status.
docker container inspect 6995955d1669       # Details of one container config
docker container exec -it 6995955d1669 bash # Open Running Containerinteractivity 
docker  inspect -f '{{.NetworkSettings.IPAddress}}' 6995955d1669 # This Command used for filtering the output
172.17.0.2
===================================================================================================================
Docker Networking Commands:
root@TestingLab:~# docker network ls  # This Command list of all network.

NETWORK ID     NAME      DRIVER    SCOPE
c924c6b371ae   bridge    bridge    local
913a1fff5e68   host      host      local
e8298b0d9c9d   none      null      local

docker network inspect c924c6b371ae # This Command help to describe allbridge network related details. 
docker network ls -f driver=bridge # If we need show all bridge in current env.

docker network create myntwork # This Command help to create a network bridge or new network pool.
docker network ls 
docker network inspect c9fa118fe780
docker network connect myntwork (ContainerId or name 6995955d1669) # This command using for connect the container with network pool or bridge.
docker network inspect myntwork
docker container inspect proxyserver
docker network  inspect  c9fa118fe7803f9616169d19627f33e5bfa51be4b3a2f0f42b41d44c042a3869
docker container run -d --name mynwktestcontainer --network myntwork nginx # This command help to create new container with created netwok pool and bridge.

docker network disconnect myntwork  mynwktestcontainer -->>docker network disconnect (Networkpool or bridge name) myntwork  mynwktestcontainer(This is Container Name or Container ID)  # This container is help to disconnect from the network pool or bridge.


docker image tag ambadatt/ubuntulatest ambadatt/ubuntulatest:1.0.1 #This Command help to Tag a new Image it's help to identify which images need to deploy in test, prod or dev.

docker images
docker login # This is used for logging docker hub repository. Then we will push the newly created image.
docker image push ambadatt/ubuntulatest   # This command is sample of image pushing to docker hub.

=================================================================================================================================
Docker persistent valume or mount point>>

 
docker volume ls  # This Command Help to list all the docker volume present in docker host.
docker inspect mysql3
docker run -d --name mysql3 -e MYSQL_ALLOW_EMPTY_PASSWORD=True --mount source=mysql-db,destination=/var/lib/mysql mysql # This Command help to create a volume and attach the existing valume to newly created container.

cd /var/lib/mysql
cd /var/lib/docker/volumes/mysql-db/_data

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Persistent Data : Bind Mounts
Docker : Data Management
➤ Bind Mounts : Bind mount means a file or directory on
the host machine is mounted into a container..
➤ Mapping of Host Files into a Container Files.
➤ Bind mounts may be stored anywhere on the host system.
➤ Non-Docker processes on the Docker host or a Docker
container can modify them at any time.
➤ Bind Mount can’t be use in DockerFile.
Docker : Data Management
➤ Good Use Case of Bind Mounts
➤ Sharing configuration files from the host machine to
containers.
➤ Sharing source code or build artifacts between a development
environment on the Docker host and a container.
Docker : Data Management
➤ Start nginx with Bind Mount
➤ Run NGINX

docker container run -d - -name nginx - -mount type=bind, source=$(pwd),target=/app nginx 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
mkdir dockerbind
docker run -d --name nginbind --mount type=bind,source=$(pwd),target=/app nginx

 docker run -d --name mysql-test -e "MYSQL_ROOT_PASSWORD=mypassword" --mount source=mysql-db,target=/var/lib/mysql mysql:8.0
 docker container ls
 docker volume ls
 apt-get install mysql-client
 mysql -u root -p mypassword -h 172.17.0.20 -P 3306

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
docker system df # This command helpful on checking the host machine docker process
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 docker run -d --rm --name busyboxtest busybox ping -c10 google.com # The rm option is selected when container specific job is done and container on exited state, this condition the exited container is automatically deleted after container job task is done. this is help to reduce storage consuption.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Create a monitoring image and launch a new container with buid image.

docker container run -d --name busybox1 busybox
  docker ps
  docker container run -dt --name busybox2 busybox sh
  docker ps
  docker container inspect busybox
  docker ps
  docker container inspect busybox2
  vi Dockerfile
  docker build -t monitoringimage .
  docker images
  docker container run -dt --name heathcheckcontainer monitoringimage sh
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Documentation Referred:

https://docs.docker.com/engine/reference/builder/

https://docs.docker.com/engine/reference/run/#healthcheck

Code Used:

docker run -dt --name tmp  --health-cmd "curl --fail http://localhost" --health-interval=5s busybox sh
 
docker run -dt --name tmp2 --health-cmd "curl -f http://localhost" --health-interval=5s --health-retries=1 busybox sh
 
curl  http://dexter.kplabs.in/test
 
curl -f http://dexter.kplabs.in/test214.txt
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  docker container stop $(docker container ps -aq) #This command help to stop all container from Docker hosts.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
docker container commit dockercontainersnapshot busybox_snapshot # This command help to take snapshot or re-image after upgrading or add some extra packages in container then create ne image.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
docker container commit --change='CMD ["ash"]' dockercontainersnapshot modifiedchangeimgaes_busybox1

docker image prune # this command used for remove the Damgling image. >> Dangling images which does not have any tag and not any reference container image(Means running container and stop container)
docker image prune -a # This cmannd used for all images deleted which does not any container referenced.

>>>>>>>>>>>>>>>>>>>>++++++++++++++++++++++++++++++++++++++++++++++>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Flattening Docker Images process >> This mean how to reduce image size and multi layer to single layer conversion process.
docker pull ubuntu
docker images
  205  docker image history docker ubuntu
  206  docker image history  ubuntu
  207  docker run -d --name myubuntu ubuntu
  208  docker ps
  209  docker run --detach --name myubuntu1 ubuntu
  210  docker ps
  211  docker run -dt --name myubuntu2 ubuntu
  212  docker ps -a
  213  docker ps
  214  docker export myubuntu2 > myubuntu.demo.tar
  215  docker images
  216  ll
  217  cat myubuntu.demo.tar | docker import - myubuntu:latest
  218  docker images
  219  docker image history myubuntu
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>+++++++++++++++++++++++++>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Document - Docker Save and Docker Load
Base Dockerfile

FROM busybox
RUN touch custom.txt
CMD ["/bin/sh"]
docker build -t myapp .

Save and Load Images

docker save myapp > myapp.tar
docker load < myapp.tar
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
